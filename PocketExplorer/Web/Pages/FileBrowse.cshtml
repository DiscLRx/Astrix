@page "~/browse/{locationName}/{*path}"
@model PocketExplorer.Web.Pages.FileBrowseModel
@{
    var pathArr = Request.Path.ToString().TrimEnd('/').Split('/');
    pathArr = [pathArr[0], $"{pathArr[1]}/{pathArr[2]}", .. pathArr[3..]];

    var currentPath = string.Join("/", pathArr);
    currentPath = currentPath.Trim('/');
    for (var i = 0; i < pathArr.Length; i++)
    {
        pathArr[i] = pathArr[i].Replace("+", "%2B");
        pathArr[i] = $"{System.Web.HttpUtility.UrlDecode(pathArr[i])}/";
    }
}

@* <meta name="viewport" content="width=device-width, initial-scale=1"/> *@
<meta name="format-detection" content="telephone=no"/>
<meta name="format-detection" content="email=no"/>

<style>
    html {
        background: rgb(30, 30, 30);
    }

    td,
    th {
        text-align: left;
        padding: 3px 10px 3px 3px;
    }

    th {
        color: rgb(255, 255, 255);
        font-size: 16px;
    }

    td {
        color: rgb(200, 200, 200);
        font-size: 15px;
    }

    table {
        border-color: rgba(150, 150, 150, 1);
        border-collapse: collapse;
        width: 100%;
    }

    a {
        text-decoration: none;
        color: rgb(0, 170, 235);
        font-size: 16px;
    }

    a:hover {
        color: rgb(0, 230, 255);
    }

    a:active {
        color: rgb(0, 255, 255);
    }

    .thumb-area {
        padding: 0;
        width: 150px;
        text-align: center;
        font-size: 4rem;
    }

    .size,
    .last-modify {
        text-align: right;
    }

    h4 > a:nth-child(1)::before {
        content: 'HOME';
    }

    #file-form {
        display: flex;
        flex-direction: row;
        flex-wrap: nowrap;
        column-gap: 0.5rem;
    }

    input[type=file] {
        color: rgba(255, 255, 255, 1);
        background-color: rgba(60, 60, 60, 1);
        border-radius: .25rem;
        min-width: 13rem;
        width: 15rem;
        font-size: 0.9rem;
    }

    input[type=file]::file-selector-button,
    #upload-btn {
        padding: 6px;
        font-size: 1rem;
        color: #fff;
        border-radius: .25rem;
        border: 1px solid #2a80eb;
        background-color: #2a80eb;
        cursor: pointer;
        border: none;
        padding: 0 0.65rem;
        line-height: 2.3rem;
    }


    #upload-panel {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        column-gap: 1rem;
    }

    #upload-count {
        color: #fff;
        font-size: 0.75rem;
        font-weight: lighter;
    }

    #upload-progress-container {
        height: 0.3rem;
        min-width: 5rem;
        width: 100%;
        background-color: #fff;
        border-radius: 0.15rem;
        overflow: hidden;
        display: flex;
        flex-direction: row;
    }

    #upload-progress-value {
        height: 100%;
        background-color: #2a80eb;
    }
</style>

<div id="upload-panel">
    <form enctype="multipart/form-data" id="file-form">
        <input type="file" name="formFiles" multiple/>
        <button type="button" id="upload-btn">上传</button>
    </form>
    <div id="upload-status-panel">
        <div id="upload-count">
            <span id="uploaded"></span>
            <span>/</span>
            <span id="upload-total"></span>
        </div>
        <div id="upload-progress-container">
            <div id="upload-progress-value"></div>
        </div>
    </div>
</div>

<h4>
    @for (var i = 0; i < pathArr.Length; i++)
    {
        var subPathArr = pathArr[0..(i + 1)];
        for (var j = 0; j < subPathArr.Length; j++)
        {
            if (j == 1)
            {
                var sArr = subPathArr[j].Trim('/').Split('/');
                subPathArr[1] = System.Web.HttpUtility.UrlEncode(sArr[0]) + "/" + System.Web.HttpUtility.UrlEncode(sArr[1]);
            }
            else
            {
                subPathArr[j] = System.Web.HttpUtility.UrlEncode(subPathArr[j].Trim('/'));
            }
        }

        var url = "/" + string.Join("/", subPathArr).TrimStart('/');
        url = url.Replace("+", "%20");<a href="@url">@if (i == 1)
            {@pathArr[i].Split('/', 2)[1]}
            else
            {@pathArr[i]}</a>}
</h4>

<table border="1" cellspacing="0">
    <thead>
    <tr>
        <th class="thumb-area"></th>
        <th>Name</th>
        <th class="size">Size</th>
        <th class="last-modify">Last Modify</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in Model.DirectoryItems)
    {
        var itemNameUrl = System.Web.HttpUtility.UrlEncode(item.Name.Trim('/')).Replace("+", "%20");

        <tr>
            @if (item.Type == "dir")
            {
                <td class="thumb-area">
                    📁
                </td>
                <td>
                    <a href="/@currentPath/@itemNameUrl">@item.Name</a>
                </td>
            }
            else
            {
                @if (item.ThumbnailId is null)
                {
                    <td class="thumb-area">📄</td>
                }
                else
                {
                    <td class="thumb-area">
                        <img src="/cache/thumbnail/@item.ThumbnailId">
                    </td>
                }
                <td>
                    <a href="/file/@currentPath[7..]/@itemNameUrl" target="_blank">@item.Name</a>
                </td>
            }
            <td class="size">@(item.Type == "file" ? item.Size : "")</td>
            <td class="last-modify">@item.LastModify.ToString("yyyy/MM/dd hh:mm:ss")</td>
        </tr>
    }
    </tbody>
</table>

<script>
    function renderSize(srcsize) {
        if (srcsize === 0) {
            return '0 B'
        }
        let unitArr = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]
        let index = Math.floor(Math.log(srcsize) / Math.log(1024))
        let size = srcsize / Math.pow(1024, index)
        size = size.toFixed(2)
        return `${size} ${unitArr[index]}`
    }

    document.querySelectorAll('td.size').forEach(e => {
        const sizeStr = e.innerText;
        if (sizeStr === '') {
            return;
        }
        let size = parseInt(sizeStr);
        e.innerText = renderSize(size)
    });

    const uploadStatusPanel = document.querySelector('#upload-status-panel')
    uploadStatusPanel.style.display = 'none'

    const uploadProgressValue = document.querySelector('#upload-progress-value')
    const uploaded = document.querySelector('#uploaded')
    const uploadTotal = document.querySelector('#upload-total')

    const getInputFileTotalSize = () => {
        const input = document.querySelector('input[name=formFiles]')
        let total = 0
        for (const f of input.files) {
            total += f.size
        }
        return total
    }

    document.querySelector('#upload-btn').onclick = () => {
        const form = document.querySelector('#file-form')
        const formData = new FormData(form)
        const xhr = new XMLHttpRequest()

        xhr.open('POST', '/api/upload/@currentPath', true);
        xhr.onloadstart = (e) => {
            uploaded.innerText = 0
            uploadTotal.innerText = getInputFileTotalSize().toLocaleString()
            uploadStatusPanel.style.display = ''
        }
        xhr.onreadystatechange = () => {
            location.reload()
        };
        xhr.upload.onprogress = (e) => {
            uploaded.innerText = e.loaded.toLocaleString()
            uploadTotal.innerText = e.total.toLocaleString()
            let rate = e.loaded / e.total;
            uploadProgressValue.style.width = `${rate * 100}%`
        }
        xhr.send(formData);
    }
</script>